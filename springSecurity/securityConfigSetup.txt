


src/main/java/com/codingdojo/auth/config/WebSecurityConfig.java
@Configuration
public class WebSecurityConfig {
	@Bean
	protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.
	            authorizeRequests()
	                .antMatchers("/css/**", "/js/**", "/registration").permitAll()
	                .anyRequest().authenticated()
	                .and()
	            .formLogin()
	                .loginPage("/login")
	                .permitAll()
	                .and()
	            .logout()
	                .permitAll();
		
		return http.build();
	}
    	// Add BCrypt Bean
    	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.
	        authorizeRequests()
	            .antMatchers("/css/**", "/js/**", "/registration").permitAll()
	            .anyRequest().authenticated()
	            .and()
	        .formLogin()
	            .loginPage("/login")
	            .permitAll()
	            .and()
	        .logout()
	            .permitAll();
		
		return http.build();
	}

    private UserDetailsService userDetailsService;
	
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.
	        authorizeRequests()
	            .antMatchers("/css/**", "/js/**", "/registration").permitAll()
	            .anyRequest().authenticated()
	            .and()
	        .formLogin()
	            .loginPage("/login")
	            .permitAll()
	            .and()
	        .logout()
	            .permitAll();
		
		return http.build();
	}

	//  configureGlobal(AuthenticationManagerBuilder): This method is configuring Spring Security to use our custom implementation of the UserDetailsService with Bcrypt.
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());
    } 
}
}

The mapping matches URLs using the following rules:
    ? matches one character
    * matches zero or more characters
    ** matches zero or more directories in a path
    {spring:[a-z]+} matches the regexp [a-z]+ as a path variable named "spring"

Examples:
            com/t?st.jsp — matches com/test.jsp but also com/tast.jsp or com/txst.jsp
            com/*.jsp — matches all .jsp files in the com directory
            com/**/test.jsp — matches all test.jsp files underneath the com path
            org/springframework/**/*.jsp — matches all .jsp files underneath the org/springframework path
            org/**/servlet/bla.jsp — matches org/springframework/servlet/bla.jsp but also org/springframework/testing/servlet/bla.jsp and org/servlet/bla.jsp
            com/{filename:\w+}.jsp will match com/test.jsp and assign the value test to the filename variable

In our example, we are allowing the everything in that matches "/static" and "/registration" to be permitted to everyone. "/static" is for our assets and "/registration" is for the GET and POST request for registration.
    .anyRequest(): Maps any request
    .authenticated(): Specify URLs that are allowed by authenticated users only
    .formLogin(): Specifies to support form-based authentication. Now, our users are going to be authenticated via a FORM
    .loginPage("/login"): Specifies the URL to send users to if login is required
    logout(): Provides logout support. The default is that accessing the URL "/logout" will log the user out by invalidating the HTTP Session,cleaning up any rememberMe() authentication that was configured, clearing the SecurityContextHolder, and then redirect to "/login?success".